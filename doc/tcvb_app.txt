projet
-----
./tcvb
https://github.com/spardo776/tcvb

commandes git
-------------
cd tcvb
git status
git add file
git commit -a -m 'comment'
git push origin master
git pull origin/master ... ???

outils
------
nodejs
express
nodemon
eslint ?

bdd
---
sous ./data/<objet>
format json
. group : day, hour, court, level, size, year, id
. member : name, firstname, year, group_id, id
jeu de données sous ./data_sample

arborescence
------------
./data: bdd
./data_sample : exemple bdd
./static: fichier static client
./tests: fichiers test api

tests
-----
tests pour API
./test.sh 
	exec test_commands.sh > .out
	diff .ref . out
./test.sh init
	cp .ref  .ref-prev
	exec test_commands.sh > . out
*.json : fichiers utilisés par test_commands.sh (POST)

js lib : datastore
------------
datastore.js : gestion bdd

toutes les fonctions prennent un object "contexte" en paramètre :

<contexte> = 
	{ 
	dict : <dictionnary>,
	name : string obj_name,
	data_in : <data object>|string id,
	data_out : [ <data_object>, ..],
	cb_success : fn success,
	cb_failure : fn failure,
	http_success : int code,
	http_failure : int code,
	http_body : boolean,
	msgs : [ <msg>, ...],
	children : [ <obj_name>,

<msg> = {msg: "..." , diag: "..." }

<dictionnary> =  voir lib dict
   
<res> Express res

les éléments de contextes manipulés par chaque fonction sont indiqués ci dessous.

. f_del_object ({ dict : <dictionnary>, name : obj_name, data_in : id, cb_success :  f_success, cb_failure : f_failure})
    => {.., http_success : code, http_failure : code, http_body : false, data_out : [], msgs : [ <msg> , ..]}

. f_upd_object ( { dict : <dictionnary>, name : obj_name, data_in : <object>
	=> {.., http_success : 200, http_failure : 400, http_body : false,  data_out : [], msgs : [ <msg> , ..]}

. f_add_object ({ dict : <dictionnary>,name : obj_name, data_in : { <object data sans id> }, cb_success : <fn>, cb_failure)
	=> { .., http_success : 201, http_failure : 400, http_body : false, data_out : [], msgs : [ <msg> , ..]}

. f_get_object ( { data_in : <object filter> }) -> {data_out: [ <object>, ..]}

. f_get_children ({ data_out : [ object, ...], children : [ obj_name,...] })

. f_wbs_failure( { res:<result>, msgs: [ msg, ..],  http_failure : code })

. f_wbs_success( { res: <result>, http_body : true/false, data_out : [ <object>, ..],  http_success : code })

js lib dict_tcvb
---------------
data dictionnary de la base :

 {
     "<object_name>":
        {
            "caption": "<caption>",
            "fields": {
            "<field_name>": "<rule string : M for mandat, I for integer",
            ...
            },
            "pkey": ["field_name", ...]
        },
    ...
    },

js lib server
-------------
basé sur Express
- f_wbs_add|upd|del|get_group : web services pour objets groupe - appel des fns datastore
- _wbs_add|upd|del|get_member : web services pour objets member - appel des fns datastore
server API (get, post, put, delete): /api/obj_name
serveur static : /static
