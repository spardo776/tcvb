*** html ***

<script src="https://unpkg.com/vue-router/dist/vue-router.js"></script>
<div id="app">
  <h1>Hello App!</h1>
  <!-- component matched by the route will render here -->
  <router-view></router-view>
</div>

*** js ***

const Foo = { template: '<div>foo</div>' }
const Bar = { template: '<div>bar</div>' }


const User = {
  template: '<div>User {{ $route.params.id }}</div>'
}

const router = new VueRouter({
  routes: 
  [
  { path: '/foo', component: Foo },   
  { path: '/user/:id', component: User , name : 'user'}  //optional paramater name
  ]
  
})

const app = new Vue({
  ../..
  router :router;
})

*** push ***

// literal string path
router.push('home')

// object
router.push({ path: `/user/123` })

// named route (use name not path!)
router.push({ name: 'user', params: { userId: 123 }})

// with query, resulting in /register?plan=private
router.push({ path: 'register', query: { plan: 'private' }})

// dans les methods de l'objet vue, acces au routeur avec $router

*** named / multiple views ***
html:
<router-view class="view one"></router-view>
<router-view class="view two" name="a"></router-view>
<router-view class="view three" name="b"></router-view>

js:
const router = new VueRouter({
  routes: [
    {
      path: '/',
      components: {
        default: Foo,
        a: Bar,
        b: Baz
      }
    }
  ]
})

*** props ***
// pour eviter d'acceder $route depuis le composant

https://router.vuejs.org/guide/essentials/passing-props.html

*** data fetching ***
https://router.vuejs.org/guide/advanced/data-fetching.html

